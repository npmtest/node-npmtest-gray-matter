{"/home/travis/build/npmtest/node-npmtest-gray-matter/test.js":"/* istanbul instrument in package npmtest_gray_matter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gray-matter/lib.npmtest_gray_matter.js":"/* istanbul instrument in package npmtest_gray_matter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gray_matter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gray_matter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gray-matter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gray-matter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gray_matter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gray_matter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gray_matter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gray_matter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gray_matter.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gray_matter.__dirname + '/lib.npmtest_gray_matter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gray-matter/node_modules/gray-matter/index.js":"'use strict';\n\nvar fs = require('fs');\nvar extend = require('extend-shallow');\nvar parsers = require('./lib/parsers');\n\n/**\n * Expose `matter()`\n */\n\nmodule.exports = matter;\n\n/**\n * Parses a `string` of front-matter with the given `options`,\n * and returns an object.\n *\n * ```js\n * matter('---\\ntitle: foo\\n---\\nbar');\n * //=> {data: {title: 'foo'}, content: 'bar', orig: '---\\ntitle: foo\\n---\\nbar'}\n * ```\n *\n * @param {String} `string` The string to parse.\n * @param {Object} `options`\n *   @option {Array} [options] `delims` Custom delimiters formatted as an array. The default is `['---', '---']`.\n *   @option {Function} [options] `parser` Parser function to use. [js-yaml] is the default.\n * @return {Object} Valid JSON\n * @api public\n */\n\nfunction matter(str, options) {\n  if (typeof str !== 'string') {\n    throw new Error('gray-matter expects a string');\n  }\n\n  // default results to build up\n  var res = {orig: str, data: {}, content: str};\n  if (str === '') {\n    return res;\n  }\n\n  // delimiters\n  var delims = arrayify((options && options.delims) || '---');\n  var a = delims[0];\n\n  // strip byte order marks\n  str = stripBom(str);\n\n  // if the first delim isn't the first thing, return\n  if (!isFirst(str, a)) {\n    return res;\n  }\n\n  var b = '\\n' + (delims[1] || delims[0]);\n  var alen = a.length;\n\n  // if the next character after the first delim\n  // is a character in the first delim, then just\n  // return the default object. it's either a bad\n  // delim or not a delimiter at all.\n  if (a.indexOf(str.charAt(alen + 1)) !== -1) {\n    return res;\n  }\n\n  var len = str.length;\n\n  // find the index of the next delimiter before\n  // going any further. If not found, return.\n  var end = str.indexOf(b, alen + 1);\n  if (end === -1) {\n    end = len;\n  }\n\n  // detect a language, if defined\n  var lang = str.slice(alen, str.indexOf('\\n'));\n  // measure the lang before trimming whitespace\n  var start = alen + lang.length;\n\n  var opts = options || {};\n  opts.lang = opts.lang || 'yaml';\n  lang = (lang && lang.trim()) || opts.lang;\n\n  // get the front matter (data) string\n  var data = str.slice(start, end).trim();\n  if (data) {\n    // if data exists, see if we have a matching parser\n    var fn = opts.parser || parsers[lang];\n    if (typeof fn === 'function') {\n      // run the parser on the data string\n      res.data = fn(data, opts);\n    } else {\n      throw new Error('gray-matter cannot find a parser for: ' + str);\n    }\n  }\n\n  // grab the content from the string, stripping\n  // an optional new line after the second delim\n  var con = str.substr(end + b.length);\n  if (con.charAt(0) === '\\n') {\n    con = con.substr(1);\n  } else if (con.charAt(0) === '\\r' && con.charAt(1) === '\\n') {\n    con = con.substr(2);\n  }\n\n  res.content = con;\n  return res;\n}\n\n/**\n * Expose `parsers`\n *\n * @type {Object}\n */\n\nmatter.parsers = parsers;\n\n/**\n * Requires cache\n */\n\nvar YAML = matter.parsers.requires.yaml || (matter.parsers.requires.yaml = require('js-yaml'));\n\n/**\n * Read a file and parse front matter. Returns the same object\n * as `matter()`.\n *\n * ```js\n * matter.read('home.md');\n * ```\n *\n * @param {String} `fp` file path of the file to read.\n * @param {Object} `options` Options to pass to gray-matter.\n * @return {Object}\n * @api public\n */\n\nmatter.read = function(fp, options) {\n  var str = fs.readFileSync(fp, 'utf8');\n  var obj = matter(str, options);\n  return extend(obj, {\n    path: fp\n  });\n};\n\n/**\n * Stringify an object to front-matter-formatted YAML, and\n * concatenate it to the given string.\n *\n * ```js\n * matter.stringify('foo bar baz', {title: 'Home'});\n * ```\n * Results in:\n *\n * ```yaml\n * ---\n * title: Home\n * ---\n * foo bar baz\n * ```\n *\n * @param {String} `str` The content string to append to stringified front-matter.\n * @param {Object} `data` Front matter to stringify.\n * @param {Object} `options` Options to pass to js-yaml\n * @return {String}\n * @api public\n */\n\nmatter.stringify = function(str, data, options) {\n  var delims = arrayify(options && options.delims || '---');\n  var res = '';\n  res += delims[0] + '\\n';\n  res += YAML.safeDump(data, options);\n  res += (delims[1] || delims[0]) + '\\n';\n  res += str + '\\n';\n  return res;\n};\n\n/**\n * Return true if the given `string` has front matter.\n *\n * @param  {String} `string`\n * @param  {Object} `options`\n * @return {Boolean} True if front matter exists.\n */\n\nmatter.test = function(str, options) {\n  var delims = arrayify(options && options.delims || '---');\n  return isFirst(str, delims[0]);\n};\n\n/**\n * Return true if the given `ch` the first\n * thing in the string.\n */\n\nfunction isFirst(str, ch) {\n  return str.substr(0, ch.length) === ch;\n}\n\n/**\n * Utility to strip byte order marks\n */\n\nfunction stripBom(str) {\n  return str.charAt(0) === '\\uFEFF' ? str.slice(1) : str;\n}\n\n/**\n * Typecast `val` to an array.\n */\n\nfunction arrayify(val) {\n  return !Array.isArray(val) ? [val] : val;\n}\n","/home/travis/build/npmtest/node-npmtest-gray-matter/node_modules/gray-matter/lib/parsers.js":"/*!\n * gray-matter <https://github.com/jonschlinkert/gray-matter.git>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\n\n/**\n * Module dependencies\n */\n\nvar extend = require('extend-shallow');\nvar red = require('ansi-red');\n\n/**\n * Expose `parser` module\n */\n\nvar parser = module.exports;\n\n/**\n * Requires cache.\n */\n\nparser.requires = {};\n\n/**\n * Parse YAML front matter\n *\n * @param  {String} `str` The string to parse.\n * @param  {Object} `options` Options to pass to [js-yaml].\n * @return {Object} Parsed object of data.\n * @api public\n */\n\nparser.yaml = function(str, options) {\n  var opts = extend({strict: false, safeLoad: false}, options);\n  try {\n    var YAML = parser.requires.yaml || (parser.requires.yaml = require('js-yaml'));\n    return opts.safeLoad ? YAML.safeLoad(str, options) : YAML.load(str, options);\n  } catch (err) {\n    if (opts.strict) {\n      throw new SyntaxError(msg('js-yaml', err));\n    } else {\n      return {};\n    }\n  }\n};\n\n\n/**\n * Parse JSON front matter\n *\n * @param  {String} `str` The string to parse.\n * @return {Object} Parsed object of data.\n * @api public\n */\n\nparser.json = function(str, options) {\n  var opts = extend({strict: false}, options);\n  try {\n    return JSON.parse(str);\n  } catch (err) {\n    if (opts.strict) {\n      throw new SyntaxError(msg('JSON', err));\n    } else {\n      return {};\n    }\n  }\n};\n\n\n/**\n * Parse JavaScript front matter. To use javascript front-matter, you must\n * set `options.eval` to `true`.\n *\n * By default, javascript code is wrapped in a function that is immediately\n * executed when the parser is called. Thus, to be returned as a useful object,\n * code should be written as object properties.\n *\n * **Example:**\n *\n * ```markdown\n * ---js\n * title: 'autodetect-javascript',\n * // this function won't be invoked when the parser is called\n * fn: {\n *   reverse: function(str) {\n *     return str.split('').reverse().join('');\n *   }\n * }\n * ---\n * ```\n *\n * @param  {String} `str` The string to parse.\n * @param  {Object} `options` Set `options.wrapped` to `false` to enable writing raw, un-wrapped javascript.\n * @return {Object} Parsed object of data.\n * @api public\n */\n\nparser.javascript = function(str, options) {\n  var opts = extend({wrapped: true, eval: false, strict: false}, options);\n  if (opts.eval) {\n    if (opts.wrapped) {\n      str = 'function data() {return {' + str + '}; } data();';\n    }\n    try {\n      return eval(str);\n    } catch (err) {\n      throw new SyntaxError(msg('javascript', err));\n    }\n    return {};\n  } else {\n\n    // if `eval` isn't set\n    if (opts.strict) {\n      throw new Error(evalError('javascript'));\n    } else {\n      console.error(evalError('javascript', true));\n    }\n  }\n};\n\n\n/**\n * Alias for `parse.javascript()`.\n *\n * @api public\n */\n\nparser.js = parser.javascript;\n\n\n/**\n * Parse Coffee-Script front matter. To use coffee front-matter, you must\n * set `options.eval` to `true`.\n *\n * @param  {String} `str` The string to parse.\n * @param  {Object} `options` Options to pass to [coffee-script].\n * @return {Object} Parsed object of data.\n * @api public\n */\n\nparser.coffee = function(str, options) {\n  var opts = extend({eval: false, strict: false}, options);\n  if (opts.eval) {\n    try {\n      var coffee = parser.requires.coffee || (parser.requires.coffee = require('coffee-script'));\n      return coffee['eval'](str, options);\n    } catch (err) {\n      throw new SyntaxError(msg('coffee-script', err));\n    }\n  } else {\n\n    // if `eval` isn't set\n    if (opts.strict) {\n      throw new Error(evalError('coffee'));\n    } else {\n      console.error(evalError('coffee', true));\n    }\n  }\n};\n\n/**\n * Alias for `parse.coffee()`.\n *\n * @api public\n */\n\nparser.cson = parser.coffee;\n\n/**\n * Parse TOML front matter.\n *\n * @param  {String} `str` The string to parse.\n * @param  {Object} `options` Options to pass to [toml-node].\n * @return {Object} Parsed object of data.\n * @api public\n */\n\nparser.toml = function(str, opts) {\n  try {\n    var toml = parser.requires.toml || (parser.requires.toml = require('toml'));\n    return toml.parse(str);\n  } catch (err) {\n    if (opts.strict) {\n      throw new SyntaxError(msg('TOML', err));\n    } else {\n      return {};\n    }\n  }\n};\n\n/**\n * Normalize error messages\n */\n\nfunction msg(lang, err) {\n  return 'gray-matter parser [' + lang + ']: ' + err;\n}\n\nfunction evalError(lang, color) {\n  var msg = '[gray-matter]: to parse ' + lang + ' set `options.eval` to `true`';\n  return color ? red(msg) : msg;\n}\n"}